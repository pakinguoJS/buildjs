var FS = require('fs');
var PATH = require('path');

// for test
// module.exports = {
	// getModules		: 	getModules,
	// getModuleDeps	:	getModuleDeps,
	// getDeepDeps		:	getDeepDeps,
	// getUglifyConfig	:	getUglifyConfig,
	// uglifyTask		:	uglifyTask
// };
module.exports = {
	uglifyTask: uglifyTask,
	concatTask: concatTask
};


// 匹配的模块id、依赖列表的正则
var _MATCH_USE_ARRAY = /seajs\.use(\s)*\((\s)*\[[a-zA-Z0-9._\-'"&/,\s]+\](\s)*(,(\s)*function(\s)*\(|\))/g;
var _MATCH_USE_STR = /seajs\.use(\s)*\((\s)*('[a-zA-Z0-9._\-&/,\s]+'|"[a-zA-Z0-9._\-&/,\s]+")(\s)*\)/g;
var _MATCH_REQUIRE = /require(\s)*\((\s)*[a-zA-Z0-9._\-'"&/,\s]+(\s)*\)/g;
var _MATCH_REQUIREASYNC_ARRAY = /require\.async(\s)*\((\s)*\[[a-zA-Z0-9._\-'"&/,\s]+\](\s)*(,(\s)*function(\s)*\(|\))/g;
var _MATCH_REQUIREASYNC_STR = /require\.async(\s)*\((\s)*('[a-zA-Z0-9._\-&/,\s]+'|"[a-zA-Z0-9._\-&/,\s]+")(\s)*\)/g;
var _MOD_USE_ARRAY = /\[[a-zA-Z0-9._\-'"&/,\s]+\]/;
var _MOD_USE_STR = /'[a-zA-Z0-9._\-&/,\s]+'|"[a-zA-Z0-9._\-&/,\s]+"/;

var _MATCH_DEFINE = /define(\s)*\((\s)*("|')[a-zA-Z0-9\\\/._-]+("|')(\s)*,/;
var _MATCH_DEFINE_DEPS = /define(\s)*\((\s)*("|')[a-zA-Z0-9\\\/._-]+("|')(\s)*,(\s)*\[[a-zA-Z0-9._\-'"&/,\s]+\]/;
var _MOD_DEFINE_DEPS = /\[[a-zA-Z0-9._\-'"&/,\s]+\]/;

var _MATCH_RELATIVE_PATH = /^[\.]+/;
var _MATCH_PATH_WITHOUT_BASE = /^http[s]{0,1}:|^file:/;


/**
 * @param	{string||array}		文件路径或文件路径数组
 * @param	{regexp}			过滤的文件类型
 * @description	获取指定文件路径下存在的 seajs.use/require/require.async 等相关使用到的模块
 */
function getModules(src){
	var output = {};
	var fileType = /\.tpl$/;

	
	if(src instanceof Array){
		src.forEach(function(path){
			_inner(path);
		})
	}else{
		_inner(src);
	}
	
	
	function _inner(path){
		var ll = FS.readdirSync(path);
		ll.forEach(function(file){
			var filepath = PATH.join(path, file);
			if(FS.statSync(filepath).isDirectory()){
				_inner(filepath);
			}else{
				dispose(filepath);
			}
		});
	}
	
	
	function dispose(path){
		if(fileType.test(PATH.extname(path))){
			var content = FS.readFileSync(path, 'utf-8');
			
			// match seajs.use array
			matchArray(_MATCH_USE_ARRAY, _MOD_USE_ARRAY, output);
			
			// match seajs.use str
			matchStr(_MATCH_USE_STR, _MOD_USE_STR, output);
		}
		
		function matchArray(regMatch, regMod, data){
			var used = content.match(regMatch);
			if(used){
				used.forEach(function(item){
					var mods = eval(item.match(regMod)[0]);
					mods.forEach(function(m){
						data[m] = 1;
					});
				});
			}
		}
		
		function matchStr(regMatch, regMod, data){
			var used = content.match(regMatch);
			if(used){
				used.forEach(function(item){
					var mods = eval(item.match(regMod)[0]);
					data[mods] = 1;
				});
			}
		}
	}

	return output;
}


/**
 * @param		{string}	查找依赖的文件夹路径
 * @description 此方法用来对指定文件夹下所有文件进行模块及其依赖的查找，匹配的是cmd规范的define('id', ['deps'], function(){})，
 *				用于查找独立模块的依赖列表
 * @return		返回的是未做完善路径处理的依赖列表，其中可能包含'../'或'./'的模块id
 */
function getModuleDeps(src, ignore){
	var output = {};
	var fileType = /\.js$/;	// 只对js文件做解析

	
	if(src instanceof Array){
		src.forEach(function(path){
			_inner(path);
		})
	}else{
		_inner(src);
	}
	
	
	function _inner(path){
		var ll = FS.readdirSync(path);
		ll.forEach(function(file){
			var filepath = PATH.join(path, file);
			if(FS.statSync(filepath).isDirectory()){
				_inner(filepath);
			}else{
				dispose(filepath);
			}
		});
	}
	
	
	function dispose(path){
		if(fileType.test(PATH.extname(path))){
			var content = FS.readFileSync(path, 'utf8');
			// 1、先找出模块id
			var mid = content.match(_MATCH_DEFINE);
			mid ? mid = mid[0].replace(/\s|define|\(|"|'|,/g, '') : mid = '';
			if (mid.length > 2) {
				// 确保模块id带上.js作为文件后缀
				PATH.extname(mid) !== '.js' ? mid += '.js' : null;
				output[mid] = {};
			} else {
				return;
			}

			// 2、匹配出依赖
			// eg: , [ "app/helloworld/js/world", "app/helloworld/js/hello", "app/helloworld/tpl/idx" ]
			// var dependecies = content.match(_MATCH_DEFINE_DEPS);
			// dependecies ? dependecies = dependecies[0].match(_MOD_DEFINE_DEPS)[0] : dependecies = '';
			// if (dependecies.length > 0) {
				// var depsList = eval(dependecies);
				// depsList.forEach(function(item, idx) {
					// 确保模块id带上.js作为文件后缀
					// PATH.extname(item) !== '.js' ? item += '.js' : null;
					// output[mid][item] = 1;
				// });
			// }
			var dependecies = content.match(_MATCH_REQUIRE);
			if(dependecies && dependecies.length > 0){
				dependecies.forEach(function(item){
					var mods = eval(item.match(_MOD_USE_STR)[0]);
					// 确保模块id带上.js作为文件后缀
					PATH.extname(mods) !== '.js' ? mods += '.js' : null;
					// 判断是否在ignore里，是的话则忽略
					mods in ignore ? null : output[mid][mods] = 1;
				});
			}
		}
	}
	
	return output;
}



/**
 * @description	获取深度依赖，处理步骤如下：
 * 1、通过@function getModuleDeps查找未完善处理的依赖列表
 * 2、对1获取的列表进行二次处理
 * 3、根据模块深度依赖链规则完善依赖列表
 */
function getDeepDeps(src, deps, ignore){
	if(arguments.length < 2){
		console.log('');
		return;
	}
	ignore ? ignore = transferIgnore(ignore) : ignore = {};

	// 步骤一：先获取依赖列表
	deps ? null : deps = getModuleDeps(src, ignore);	// 如果有传参，则不需要再次获取
	if(!deps){
		return;
	}
	
	// 步骤二：二次处理依赖列表，除去带有'../'或'./'的相对路径
	disposeModuleDeps(deps);
	function disposeModuleDeps(data){
		for(var itm in data){
			for(var _itm in data[itm]){
				if(_MATCH_RELATIVE_PATH.test(_itm)){
					// 先除去原有的，再替换
					delete data[itm][_itm];
					data[itm][PATH.join(PATH.dirname(itm), _itm).replace(/[\\]+/g, '/')] = 1;
				}
			}
		}
	}
	
	// 步骤三：深度依赖
	var deepDeps = {};
	
	for(var item in deps){
		deepDeps[item] = {};
		recursionDeps(item);
	}
	
	function recursionDeps(itm){
		for(var i in deps[itm]){
			// 如果是自身依赖，则移除
			if(i === itm){
				delete deps[itm][i];
			}else if(i in deps){
				deepDeps[item][i] = 1;
				recursionDeps(i);
			}else{
				deepDeps[item][i] = 1;
			}
		}
	}
	
	function transferIgnore(src){
		var _rs = {};
		for(var itm in src){
			_rs[src[itm]] = 1;
		}
		return _rs;
	}
	
	return deepDeps;
}



/**
 * @description	获取需要uglify合并压缩的文件列表
 */
function getUglifyConfig(modsrc, base, ignore){
	if(arguments.length < 2){
	
	}
	
	if(typeof modsrc === 'string'){
		modsrc = [modsrc];
	}
	
	// 先根据参数获取指定文件夹下所有模块依赖列表
	var files = {};
	modsrc.forEach(function(path){
		joinObj(files, getDeepDeps(path, null, ignore));
	});
	
	function joinObj(data, added){
		for(var itm in added){
			data[itm] = added[itm];
		}
	}
	
	// 再填充模块本身，让合并的文件列表里都包括需要输出的文件
	files = obj2Files(files, base);
	
	function joinPath(src, base){
		if(/^\\/.test(src)){
			return src;
		}else{
			return PATH.join(base, src).replace(/\\/g, '/');
		}
	}
	
	function obj2Files(data, base){
		var output = {};
		var tmp;
		for(var i in data){
			if(_MATCH_PATH_WITHOUT_BASE.test(i)){
				continue;
			}
			tmp = joinPath(i, base);
			//	先添加自己
			output[tmp] = [tmp];
			for(var _i in data[i]){
				if(_MATCH_PATH_WITHOUT_BASE.test(_i)){
					continue;
				}
				output[tmp].push(joinPath(_i, base));
			}
		}
		return output;
	}
	
	// debug: write file if open
	// FS.writeFileSync(PATH.join(base, 'files_config.json'), JSON.stringify(files), 'utf-8');
	
	return files;
}



/**
 * @param {type} src
 * @param {type} dist
 * @param {type} alias
 * @param {function} callback
 * @param {type} ignore
 * @returns {undefined}
 */
function uglifyTask(modsrc, base, ignore, gruntPath, callback) {
    var uglify = {
        uglifyTask: {
            files: getUglifyConfig(modsrc, base, ignore)
        }
    };

    var output = '\
        module.exports = function(grunt){\
            grunt.initConfig({\
                pkg: grunt.file.readJSON("package.json"),\
                uglify:' + JSON.stringify(uglify) +
            '});\
            grunt.loadNpmTasks("grunt-contrib-uglify");\
            grunt.registerTask("default", ["uglify"]);\
        };';

    FS.writeFileSync(PATH.join(gruntPath,'Gruntfile.js'), output);
    execGrunt(gruntPath, callback);
}


function concatTask(modsrc, base, ignore,  gruntPath, callback) {
    var uglify = {
        uglifyTask: {
            files: getUglifyConfig(modsrc, base, ignore)
        }
    };

    var output = '\
        module.exports = function(grunt){\
            grunt.initConfig({\
                pkg: grunt.file.readJSON("package.json"),\
                concat:' + JSON.stringify(uglify) +
            '});\
            grunt.loadNpmTasks("grunt-cmd-concat");\
            grunt.registerTask("default", ["concat"]);\
        };';

    FS.writeFileSync(PATH.join(gruntPath,'Gruntfile.js'), output);
    execGrunt(gruntPath, callback);
}


/**
 * @param {string} path gruntjs所在的路径
 * @param {function} callback
 * @returns {}
 */
function execGrunt(path, callback) {
    var exec = require('child_process').exec;
    exec('cd ' + path + ' && grunt --force', function(error, stdout, stderr) {
        if (error !== null) {
            console.log('Uglify exec error: ' + error);
            return;
        }
        console.log(stdout);
        typeof callback === 'function' ? callback() : null;
    });
}

