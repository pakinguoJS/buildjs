
define(function (require, exports, module) {

	var $ = require('jquery');
	require('bootstrap');
	require('../css/advanced-pagination.css');

	$.fn.extend({

		advancedPagination: function (options) {

			options = options || {};

			this.each(function (index, element) {
				
				if (!$(this).data('advancedPagination')) {
					$(this).data('advancedPagination', {});

					$(this)
						.addClass('advanced-pagination')
						.advancedPagination().reload(options);
				}
			});

			return {

				$this: this,

				reload: function (options) {

					options = options || {};

					var $this = this.$this;

					var currentPage = options.current || parseInt($this.attr('data-current'));

					var paginationOptions = $this.data('advancedPagination');
					paginationOptions.url = options.url || paginationOptions.url || $this.attr('data-url') || 'javascript:void(0)';
					paginationOptions.min = options.min || paginationOptions.min || parseInt($this.attr('data-min')) || '1';
					paginationOptions.max = options.max || paginationOptions.max || parseInt($this.attr('data-max')) || '1';
					paginationOptions.range = options.range || paginationOptions.range || parseInt($this.attr('data-range')) || '3';

					$this
						.empty()
						.advancedPagination().page(currentPage);

					return this.$this;
				},

				page: function (page) {

					var $this = this.$this;
					var options = $this.data('advancedPagination');

					options.current = page;

					var visibleMin = options.current - options.range;
					var visibleMax = options.current + options.range;
					if (visibleMin <= options.min) {
						visibleMin = options.min;
						visibleMax = options.min + options.range * 2 + 1;
					}
					if (visibleMax >= options.max) {
						visibleMin = options.max - options.range * 2 - 1;
						visibleMax = options.max;
					}
					if (visibleMin < options.min || visibleMax > options.max) {
						visibleMin = options.min;
						visibleMax = options.max;
					}

					var pagination = $('<ul class="pagination"></ul>');
					function addItem(page, text, active) {
						pagination
							.append($('<li></li>')
								.addClass('pagination-page')
								.addClass(active ? 'active' : '')
								.append($('<a></a>')
									.html(text)
									.attr({
										'href': options.url.replace('$', page),
										'data-page': page
									})
									.click(function (event) {
										var event = $.Event('pagination');
										event.page = page;
										$this.trigger(event, function () {
											$this.advancedPagination().page(page);
										});
									})
								)
							);
					};
					addItem(options.min, '&laquo;')
					if (visibleMin > options.min) addItem((visibleMin - 1), '...');
					for (var page = visibleMin; page <= visibleMax; page++) {
						addItem(page, page, page == options.current);
					}
					if (visibleMax < options.max) addItem((visibleMax + 1), '...');
					addItem(options.max, '&raquo;');

					pagination
						.append($('<li></li>')
							.append($('<a></a>')
								.attr('href', 'javascript:void(0)')
								.append($('<span class="glyphicon glyphicon-send"></span>'))
								.popover({
									content: $('<div class="input-group input-group-sm quick-pagination"></div>')
										.append($('<input type="text" class="form-control" />')
											.keypress(function (event) {
												if (event.which == 13) {
													$(this).siblings('span').children('button').click();
												}
											})
										)
										.append($('<span class="input-group-btn"></span>')
											.append($('<button type="button" class="btn btn-primary">Go</button>')
												.click(function (event) {
													var page = parseInt($(this).parent().siblings('input').val());
													if (page >= options.min && page <= options.max) {
														var event = $.Event('pagination');
														event.page = page;
														$this.trigger(event, function () {
															$this.advancedPagination().page(page);
														});
														window.location = options.url.replace('$', page);
													}
												})
											)
										),
									html: true,
									placement: 'top'
								})
								.on('shown.bs.popover', function (event) {
									$(this).siblings('.popover').find('input').focus();
								})
							)
						);

					$this
						.empty()
						.append(pagination);

					return this.$this;
				}

			};
		}

	});

});