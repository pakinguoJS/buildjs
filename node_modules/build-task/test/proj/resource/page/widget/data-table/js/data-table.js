
define(function (require, exports, module) {

	var $ = require('jquery');
	require('bootstrap');
	require('../css/data-table.css');

	$.fn.extend({

		dataTable: function (options) {

			this.each(function (index, element) {
				
				if (!$(this).data('dataTable')) {
					$(this).data('dataTable', {});

					options = options || {};

					var columns = {};
					$(this).find('thead th').each(function (index, element) {
						columns[$(this).attr('data-key')] = {
							type: $(this).attr('data-type') || 'text',
							title: $(this).attr('data-title') || '',
							style: {
								width: $(this).attr('data-style-width'),
								horizontalAlign: $(this).attr('data-style-horizontal-align'),
								verticalAlign: $(this).attr('data-style-vertical-align'),
								backgroundColor: $(this).attr('data-style-background-color')
							}
						};
					});

					var rows = $(this).find('tbody tr').map(function (index, element) {
						var row = {};
						$(this).find('td').each(function (index, element) {
							var key = $(this).attr('data-key');

							if (columns[key].type === 'text') {
								row[key] = $(this).html();
							} else {
								row[key] = $(this).children('span').map(function (index, component) {
									var type = $(this).attr('data-type');
									if (type === 'text') {
										return {
											type: 'text',
											clazz: $(this).attr('data-class'),
											text: $(this).html(),
											tooltip: $(this).attr('data-tooltip')
										}
									}
									if (type === 'image') {
										return {
											type: 'image',
											clazz: $(this).attr('data-class'),
											src: $(this).attr('data-src'),
											alt: $(this).html(),
											tooltip: $(this).attr('data-tooltip')
										}
									}
									if (type === 'link') {
										return {
											type: 'link',
											clazz: $(this).attr('data-class'),
											href: $(this).attr('data-href'),
											text: $(this).html(),
											tooltip: $(this).attr('data-tooltip')
										}
									}
									if (type === 'textbox') {
										return {
											type: 'textbox',
											clazz: $(this).attr('data-class'),
											value: $(this).html(),
											width: $(this).attr('data-width'),
											tooltip: $(this).attr('data-tooltip')
										}
									}
									if (type === 'hidden') {
										return {
											type: 'hidden',
											clazz: $(this).attr('data-class'),
											value: $(this).html(),
											tooltip: $(this).attr('data-tooltip')
										}
									}
								}).get();
							}
						});
						return row;
					});

					return $(this)
						.addClass('data-table')
						.empty()
						.append($('<div class="table-wrap"></div>')
							.append($('<table class="table table-bordered"></table>')
								.append($('<thead></thead>'))
								.append($('<tbody></tbody>'))
							)
						)
						.dataTable().setColumns(columns)
						.dataTable().addRow(rows);
				}
			});

			return {

				$this: this,

				setColumns: function (columns) {

					var container = this.$this;

					this.clear();

					container.data('dataTable', { columns: columns });

					container.find('.table-wrap > table > thead')
						.empty()
						.append($('<tr></tr>'));

					for (var key in columns) {
						(function (key, column) {
							container.find('.table-wrap > table > thead > tr')
								.append($('<th></th>')
									.data('dataTable', {
										type: column.type,
										key: key,
										title: column.title,
										style: {
											width: column.style.width,
											horizontalAlign: column.style.horizontalAlign,
											verticalAlign: column.style.verticalAlign,
											backgroundColor: column.style.backgroundColor
										}
									})
									.css({
										'width': parseInt(column.style.width) + 'px',
										'text-align': {
											'left': 'left',
											'center': 'center',
											'right': 'right'
										}[column.style.horizontalAlign] || 'left'
									})
									.html(column.title)
								);
						})(key, columns[key]);
					}

					return this.$this;
				},

				clear: function () {

					this.$this.find('.table-wrap > table > tbody')
						.empty();

					return this.$this;
				},

				addRow: function (row) {

					var container = this.$this;

					$(row).each(function (index, row) {

						var tableRow = $('<tr></tr>');
						for (var key in container.data('dataTable').columns) {
							(function (key, column) {
								var tableCell = $('<td></td>');

								if (column.type === 'text') {
									tableCell
										.data('dataTable', {
											key: key,
											value: row[key]
										})
										.html(row[key] || '');

								} else {
									tableCell
										.data('dataTable', {
											key: key,
											value: row[key]
										});
									$.each(row[key], function (index, component) {
										if (component.type === 'text') {
											return tableCell
												.append($('<span></span>')
													.addClass(component.clazz || '')
													.html(component.text || '')
													.attr({
														 title: component.tooltip || ''
													})
												);
										}
										if (component.type === 'image') {
											return tableCell
												.append($('<img />')
													.addClass(component.clazz || '')
													.attr({
														 src: component.src || '',
														 alt: component.alt || '',
														 title: component.tooltip || ''
													})
												);
										}
										if (component.type === 'link') {
											return tableCell
												.append($('<a></a>')
													.addClass(component.clazz || '')
													.html(component.text || '')
													.attr({
														 href: component.href || '',
														 title: component.tooltip || ''
													})
												);
										}
										if (component.type === 'textbox') {
											return tableCell
												.append($('<input type="text" />')
													.addClass(component.clazz || '')
													.width(parseInt(component.width) || 0)
													.attr({
														 value: component.value || '',
														 title: component.tooltip || ''
													})
												);
										}
										if (component.type === 'hidden') {
											return tableCell
												.append($('<input type="hidden" />')
													.addClass(component.clazz || '')
													.attr({
														 value: component.value,
														 title: component.tooltip || ''
													})
												);
										}
									});
								}

								tableRow
									.append(tableCell
										.css({
											'text-align': {
												'left': 'left',
												'center': 'center',
												'right': 'right'
											}[column.style.horizontalAlign] || 'left',
											'vertical-align': {
												'top': 'top',
												'middle': 'middle',
												'bottom': 'bottom'
											}[column.style.verticalAlign] || 'middle',
											'background-color': column.style.backgroundColor || 'transparent'
										})
									);
							})(key, container.data('dataTable').columns[key]);
						}

						container.find('.table-wrap > table > tbody')
							.append(tableRow);
					});

					return this.$this;
				}/*,

				getItemList: function () {

					return this.$this.find('.preview > ul > li').map(function (index, element) {
						return {
							title: $(this).data('dataTable').title,
							iconUrl: $(this).data('dataTable').iconUrl
						};
					}).get();
				}*/

			};
		}

	});

});