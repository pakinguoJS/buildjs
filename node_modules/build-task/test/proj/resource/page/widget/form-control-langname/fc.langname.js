/**
 * @author
 * @desc
 */
define(function(require, exports, module){
    require('./fc.langname.css');

    function fcLangname(){
        this.view = '<ul></ul>\
                    <div class="input-group">\
                        <select class="form-control"></select>\
                        <span class="input-group-btn">\
                            <button class="btn btn-default" type="button"><span class="glyphicon glyphicon-plus"></span><span>{add_btn_txt}</span></button>\
                        </span>\
                    </div>';

        this.item = '<li>\
                        <div class="input-group">\
                            <span class="input-group-addon">{txt}</span>\
                            <input type="text" class="form-control">\
                        </div>\
                        <a href="javascript:void(0)" data-rel="fc-langname-remove" data-key="{key}" data-val="{txt}"><span class="glyphicon glyphicon-remove-circle"></span></a>\
                    </li>';

        this.config = {
            add_btn_txt: 'Add Language Item',
            data: []
        }
    }

    fcLangname.prototype.init = function(container, options, config){
        if(arguments.length < 2){
            return;
        }
        $.extend(this.config, config);

        this.$view = $(this.view.replace('{add_btn_txt}', this.config.add_btn_txt));
        this.$select = this.$view.find('select');
        this.$btn = this.$view.find('button');
        this.$ul = this.$view.eq(0);

        this.add();
        this.remove();
        this.select(options);
        this.initData(this.config.data);

        typeof container === 'string' ? container = $(container) : null;
        container.html('').append(this.$view);
    }

    fcLangname.prototype.add = function(){
        var _this = this;
        _this.$btn.click(function(){
            var key = _this.$select.val();
            var txt = _this.$select.find('option[value="' + key + '"]').text();
            $(_this.item.replace(/{key}/g, key).replace(/{txt}/g, txt)).appendTo(_this.$ul);
            _this.$select.find('option[value="' + key + '"]').remove();
            if(_this.$select.children().length === 0){
                _this.$btn.addClass('disabled').attr('disabled', '');
            }
        })
    }

    fcLangname.prototype.initData = function(data){
        if(!data){
            return;
        }
        for(var itm in data){
                            console.log(data[itm])
            if(data[itm] === '' || data[itm] === null){
                continue;
            }
            $(this.item.replace(/{key}/g, itm).replace(/{txt}/g, itm)).appendTo(this.$ul).find('input').val(data[itm]);
            this.$select.find('option[value="' + itm + '"]').remove();
        }
        if(this.$select.children().length === 0){
            this.$btn.addClass('disabled').attr('disabled', '');
        }
    }

    fcLangname.prototype.remove = function(){
        var _this = this;
        _this.$ul.delegate('a[data-rel="fc-langname-remove"]', 'click', function(){
            var $this = $(this);
            $('<option value="' + $this.attr('data-key') + '">' + $this.attr('data-val') + '</option>').appendTo(_this.$select);
            $this.parent().remove();
            _this.$btn.removeClass('disabled').removeAttr('disabled');
        });
    }

    fcLangname.prototype.select = function(options){
        this.$select.append(options);
    }

    fcLangname.prototype.getData = function(){
        var rs = [];
        this.$ul.children().each(function(){
            var $this = $(this);
            var val = $this.find('input').val();
            var _d = {};
            if(val){
                _d[$this.find('a').attr('data-key')] = val;
                rs.push(_d);
            }
        });
        if(rs.length === 0){
            return "";
        }else{
            return JSON.stringify(rs);
        }
    }

    module.exports = fcLangname;
})
