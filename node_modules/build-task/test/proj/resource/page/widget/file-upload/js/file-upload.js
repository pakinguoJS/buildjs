
define(function (require, exports, module) {

	var $ = require('jquery');
	require('bootstrap');
	var SWFUpload = require('swfupload');
	require('../css/file-upload.css');

	$.fn.extend({

		fileUpload: function (options) {

			options = options || {};

			this.each(function (index, element) {
				
				if (!$(this).data('fileUpload')) {
					$(this).data('fileUpload', {});

					var $this = $(this);

					var swfOptions = $(this).data('fileUpload');
					swfOptions.swfId = 'swfupload-' + Math.random();
					swfOptions.url = options.url || $(this).attr('data-url') || '';
					swfOptions.params = options.params || $(this).attr('data-params') || {};
					swfOptions.file = {
						types: options.file.types || $(this).attr('data-file-types') || '*.*',
						typesDescription: options.file.typesDescription || $(this).attr('data-file-types-description') || 'Files',
						sizeLimit: options.file.sizeLimit || $(this).attr('data-file-size-limit') || '2 MB'
					};
					swfOptions.errorCodes = {
						'QUEUE_ERROR': SWFUpload['QUEUE_ERROR'],
						'UPLOAD_ERROR': SWFUpload['UPLOAD_ERROR']
					}

					$(this)
						.addClass('file-upload')
						.append($('<span></span>').attr('id', swfOptions.swfId));

					var swfupload = new SWFUpload({

						'upload_url': swfOptions.url,
						'flash_url': '/cms/resource/lib/cmd/swf/swfupload.swf',

						'file_post_name': 'Filedata',
						'post_params': swfOptions.params,
						'use_query_string': false,
						'requeue_on_error': false,
						'http_success': [201, 202],
						'assume_success_timeout': 0,
						'file_types': swfOptions.file.types,
						'file_types_description': swfOptions.file.typesDescription,
						'file_size_limit': swfOptions.file.sizeLimit,
						'file_upload_limit': 0,
						'file_queue_limit': 0,

						'debug': false,
						
						'prevent_swf_caching': false,
						'preserve_relative_urls': false,
						
						'button_placeholder_id': swfOptions.swfId,
						'button_image_url': 'javascript:void(0)',
						'button_width': 1000,
						'button_height': 300,
						'button_text': '',
						'button_text_style': '',
						'button_text_left_padding': 0,
						'button_text_top_padding': 0,
						'button_action': SWFUpload.BUTTON_ACTION.SELECT_FILES,
						'button_disabled': false,
						'button_cursor': SWFUpload.CURSOR.HAND,
						'button_window_mode': SWFUpload.WINDOW_MODE.TRANSPARENT,
						
						'swfupload_loaded_handler': function () {
							var event = $.Event('uploadready');
							$this.trigger(event);
						},
						'file_dialog_start_handler': function () {
						},
						'file_queued_handler': function (file) {
							this.startUpload();
						},
						'file_queue_error_handler': function (file, errorCode, errorMessage) {
							var event = $.Event('error');
							event.file = file;
							var types = {};
							types[SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED] = 'QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED';
							types[SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT] = 'QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT';
							types[SWFUpload.QUEUE_ERROR.ZERO_BYTE_FILE] = 'QUEUE_ERROR.ZERO_BYTE_FILE';
							types[SWFUpload.QUEUE_ERROR.INVALID_FILETYPE] = 'QUEUE_ERROR.INVALID_FILETYPE';
							types[SWFUpload.UPLOAD_ERROR.HTTP_ERROR] = 'UPLOAD_ERROR.HTTP_ERROR';
							types[SWFUpload.UPLOAD_ERROR.MISSING_UPLOAD_URL] = 'UPLOAD_ERROR.MISSING_UPLOAD_URL';
							types[SWFUpload.UPLOAD_ERROR.IO_ERROR] = 'UPLOAD_ERROR.IO_ERROR';
							types[SWFUpload.UPLOAD_ERROR.SECURITY_ERROR] = 'UPLOAD_ERROR.SECURITY_ERROR';
							types[SWFUpload.UPLOAD_ERROR.UPLOAD_LIMIT_EXCEEDED] = 'UPLOAD_ERROR.UPLOAD_LIMIT_EXCEEDED';
							types[SWFUpload.UPLOAD_ERROR.UPLOAD_FAILED] = 'UPLOAD_ERROR.UPLOAD_FAILED';
							types[SWFUpload.UPLOAD_ERROR.SPECIFIED_FILE_ID_NOT_FOUND] = 'UPLOAD_ERROR.SPECIFIED_FILE_ID_NOT_FOUND';
							types[SWFUpload.UPLOAD_ERROR.FILE_VALIDATION_FAILED] = 'UPLOAD_ERROR.FILE_VALIDATION_FAILED';
							types[SWFUpload.UPLOAD_ERROR.FILE_CANCELLED] = 'UPLOAD_ERROR.FILE_CANCELLED';
							types[SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED] = 'UPLOAD_ERROR.UPLOAD_STOPPED';
							event.error = {
								type: types[errorCode] || 'UNKNOWN',
								message: errorMessage
							};
							$this.trigger(event);
						},
						'file_dialog_complete_handler': function (filesSelected, filesQueued, totalQueued) {
						},
						'upload_start_handler': function (file) {
							var event = $.Event('uploadstart');
							event.file = file;
							$this.trigger(event);
						},
						'upload_progress_handler': function (file, uploaded, total) {
							var event = $.Event('uploadprogress');
							event.file = file;
							event.uploaded = uploaded;
							event.total = total;
							$this.trigger(event);
						},
						'upload_error_handler': function (file, errorCode, errorMessage) {
							var event = $.Event('error');
							event.file = file;
							event.errorCode = errorCode;
							event.errorMessage = errorMessage;
							$this.trigger(event);
						},
						'upload_success_handler': function (file, body, response) {
							var event = $.Event('uploadsuccess');
							event.file = file;
							event.body = body;
							event.response = response;
							$this.trigger(event);
						},
						'upload_complete_handler': function (file) {
							var event = $.Event('uploadcomplete');
							event.file = file;
							$this.trigger(event);
						},
						'debug_handler': function (message) {
							if (this.settings['debug']) console.log(message);
						},
						
						'custom_settings': {}
					});
				}
			});

			return this;
		}

	});

});