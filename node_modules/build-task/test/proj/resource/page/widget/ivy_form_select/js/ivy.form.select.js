/**
 * @author
 * @desc
 * 自定义下拉菜单控件事件监听
 */
define(function(require, exports, module){
    var $ = require('jquery');
    IVYCountryRegion = require('ivy.region.data');

    // 选项高度
    var OPTIONHEIGHT = 20;

    /**
     * 创建下拉菜单列表
     */
    function generate(wrap, ccode, pcode){
        var html = "",
        data,
        i,l;
        data = IVYCountryRegion.getList(ccode, pcode);
        for(i = 0,l = data.length;i < l;i++){
            html += '<li data-val="' + data[i].value + '" data-text="' + data[i].name + '">' + data[i].name + '</li>'
        }
        wrap.children().remove();
        wrap.append($(html).click(itemClick).mouseenter(itemMouseenter));
        // 设置toggle缓存对象值为false
        wrap.parent().data('toggle', false);
    }

    /**
     * 对已有的select控件元素进行初始化
     */
    function init($selector,option){
        option ? null : option = {};

        // 控件本身点击事件
        $selector.each(function(){
            // 创建监听整个文档点击事件，对下拉菜单进行收起监听
            var eventId = addDocClickEvent();
            // 缓存eid
            var $this = $(this);
            $this.data('eid', eventId);

            $this.unbind('click').click(function(e){
                if($(e.target).is('input')){
                    return;
                };
                inputFocus.call(this, option);
            });
        });

        // 监听选项选中事件(需要先解绑，再绑定，防止多次监听)
        $selector.find('li').unbind('click').click(itemClick).mouseenter(itemMouseenter);

        // 输入框值改变监听
        $selector.find('input[type="text"]').unbind('change').change(function(){
            var $this = $(this).parent();
            var text = $this.find('input[type="text"]').val();
            var $li = $this.find('[data-text="' + text + '"]');
            $li.length > 0 ? $this.find('input[type="hidden"]').val($li.attr('data-val')) : $this.find('input[type="hidden"]').val(text);
        }).unbind('keydown').bind('keydown',tabKey).unbind('focus').focus(function(){
            inputFocus.call($(this).parent()[0], option);
        });

        // 编辑时初始化数据（编辑已有数据的form表单时），以隐藏域的值为主
        $selector.each(function(){
            var $this = $(this);
            var val = $this.find('input[type="hidden"]').val();
            var $li = $this.find('[data-val="' + val + '"]').addClass('active');
            $li.length > 0 ? $this.find('input[type="text"]').val($li.text()) : $this.find('input[type="text"]').val(val);
        });

        // 如果是没禁用disabled属性
        if(!option.disabled){
            $selector.find('input[type="text"]').removeAttr('disabled');
        }

    }

    /**
     * 控件点击或focus事件
     */
    function inputFocus(option){
        var $this = $(this),$ul;
        if($this.data('toggle')){
            $this.find('ul').hide().children().removeClass('hover');
            $this.data('toggle', false);
            $(document).unbind('click',docClickEventList[$this.data('eid')]);
            option.disableInput ? $(document).unbind('keydown',disableKeydown) : null;
        }else{
            // 下拉菜单显示
            $ul = $this.find('ul').show();
            // 下拉菜单默认滚动到选中的option
            var $toTop = $ul.children('[data-val="' + $this.find('input[type="hidden"]').val() + '"]').addClass('active');
            $ul.scrollTop($ul.children().index($toTop) * OPTIONHEIGHT);
            // 设定切换触发
            $this.data('toggle', true);
            // 监听整个文档事件，保证呼出下拉菜单后，如果没点选控件内的元素，则隐藏下拉菜单
            $(document).bind('click', {
                _this: $this[0],
                option: option
            } ,docClickEventList[$this.data('eid')]);
            // 额外功能
            option.disableInput ? $(document).bind('keydown',disableKeydown) : null;
        }
    }

    /**
     * 扩展选项选中后的事件
     */
    function select($selector, callback){
        $selector.find('ul').children().click(callback);
    }

    /**
     * 整个文档监听事件
     */
    var eid = 0;
    var docClickEventList = {};
    function addDocClickEvent(){
        var _id = 'docClick' + eid++;
        docClickEventList[_id] = function(e){
            var target = e.target;
            var _this = e.data._this;
            var option = e.data.option;
            if(!(target === _this || target.parentNode === _this || target.parentNode.parentNode === _this)){
                $(_this).find('ul').hide().children().removeClass('hover');
                $(_this).data('toggle', false);
                $(document).unbind('click',docClickEventList[_id]);
                option.disableInput ? $(document).unbind('keydown',disableKeydown) : null;
            }
        }
        return _id;
    }

    /**
     * option选中事件
     */
    function itemClick(){
        var $this = $(this);
        $this.parent().children().removeClass('active hover');
        $this.addClass('active');
        // 赋值
        if($this.attr('data-val') != $this.parent().prev('input').val()){
            $this.parent().prev('input').val($this.attr('data-val'));
            $this.parent().prev().prev().val($this.text());
        }
    }

    /**
     * option鼠标移上去的UI
     */
    function itemMouseenter(){
        $(this).parent().children().removeClass('active hover');
        $(this).addClass('hover');
    }

    /**
     * 禁止输入
     */
    function disableKeydown(e){
        e.preventDefault();
    }

    /**
     * 监听tab按键
     */
    function tabKey(e){
        if(e.keyCode === 9){
            $(e.target).parent().click();
        }
    }

    /**
     * Disabled select control
     */
    function disabled($_){
        if($_.attr('data-control') !== "form-control-select"){
            return;
        }else{
            $_.addClass('form_control_select_disabled').find('input[type="text"]').attr('disabled', '');
        }
    }

    /**
     * Enabled select control
     */
    function enabled($_){
        if($_.attr('data-control') !== "form-control-select"){
            return;
        }else{
            $_.removeClass('form_control_select_disabled').find('input[type="text"]').removeAttr('disabled');
        }
    }


    module.exports = {
        generate: generate,
        init: init,
        select: select,
        disabled: disabled,
        enabled: enabled
    };
})
