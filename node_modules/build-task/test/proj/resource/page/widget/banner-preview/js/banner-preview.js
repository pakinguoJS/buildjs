
define(function (require, exports, module) {

	var $ = require('jquery');
	require('bootstrap');
	require('../css/banner-preview.css');

	$.fn.extend({

		bannerPreview: function (options) {

			options = options || {};

			this.each(function (index, element) {
				
				if (!$(this).data('bannerPreview')) {
					$(this).data('bannerPreview', {});
					
					var items = $(this).find('li').map(function (index, element) {
						return {
							title: $(this).attr('data-title'),
							imageUrl: $(this).attr('data-image-url')
						};
					});

					var $this = $(this);
					
					$(this)
						.addClass('banner-preview')
						.empty()
						.append($('<button class="switch-btn switch-to-list"></button>')
							.addClass('hidden')
							.html('<span class="glyphicon glyphicon-align-justify"></span>')
							.click(function (event) {
								$this.find('.switch-btn.switch-to-list').addClass('hidden');
								$this.find('.preview.carousel-preview').addClass('hidden');
								$this.find('.switch-btn.switch-to-carousel').removeClass('hidden');
								$this.find('.preview.list-preview').removeClass('hidden');
							})
						)
						.append($('<button class="switch-btn switch-to-carousel"></button>')
							//.addClass('hidden')
							.html('<span class="glyphicon glyphicon-sound-stereo"></span>')
							.click(function (event) {
								$this.find('.switch-btn.switch-to-carousel').addClass('hidden');
								$this.find('.preview.list-preview').addClass('hidden');
								$this.find('.switch-btn.switch-to-list').removeClass('hidden');
								$this.find('.preview.carousel-preview').removeClass('hidden');
							})
						)
						.append($('<div class="preview list-preview"></div>')
							//.addClass('hidden')
							.append($('<ul></ul>'))
						)
						.append($('<div class="preview carousel-preview"></div>')
							.addClass('hidden')
							.append($('<div class="search-banner"></div>')
								.append($('<ul class="carousel-slide clearfix"></ul>'))
								.append($('<button type="button" class="search-banner-btn prev-btn"></button>')
									.html('<span class="glyphicon glyphicon-chevron-left"></span>')
									.click(function (event) {
										$this.bannerPreview().scrollToPrev();
									})
								)
								.append($('<button type="button" class="search-banner-btn next-btn"></button>')
									.html('<span class="glyphicon glyphicon-chevron-right"></span>')
									.click(function (event) {
										$this.bannerPreview().scrollToNext();
									})
								)
							)
						)
						.bannerPreview().addItem(items);

					// TODO
					setInterval(function () {
						$this.bannerPreview().scrollToNext();
					}, 3500);
				}
			});

			return {

				$this: this,

				clear: function () {

					this.$this.find('.preview.list-preview > ul')
						.empty();
					this.$this.find('.preview.carousel-preview .search-banner > ul')
						.empty();

					return this.$this;
				},

				addItem: function (item) {

					var container = this.$this;

					$(item).each(function (index, item) {
						container.find('.preview.list-preview > ul')
							.append($('<li></li>')
								.data('bannerPreview', {
									title: item.title,
									imageUrl: item.imageUrl
								})
								.append($('<img src="' + item.imageUrl + '" alt="' + item.title + '" />'))
							);
						container.find('.preview.carousel-preview .search-banner > ul')
							.append($('<li class="carousel-item pull-left"></li>')
								.append($('<img src="' + item.imageUrl + '" alt="' + item.title + '" />'))
							);
						container.bannerPreview().scrollToFirst();
					});

					return this.$this;
				},

				getItemList: function () {

					return this.$this.find('.preview.list-preview > ul > li').map(function (index, element) {
						return {
							title: $(this).data('bannerPreview').title,
							imageUrl: $(this).data('bannerPreview').imageUrl
						};
					}).get();
				},

				scrollToItem: function (item) {
					var offset = item.position().left;
					this.$this.find('.carousel-slide').css('left', (-offset) + 'px');
					this.$this.find('.carousel-item.active').removeClass('active');
					item.addClass('active');
				},
				scrollToFirst: function () {
					var firstItem = this.$this.find('.carousel-item:first-of-type');
					this.scrollToItem(firstItem);
				},
				scrollToPrev: function () {
					var prevItem = this.$this.find('.carousel-item.active').prev('.carousel-item');
					if (!prevItem.length) prevItem = this.$this.find('.carousel-item:last-of-type');
					this.scrollToItem(prevItem);
				},
				scrollToNext: function () {
					var nextItem = this.$this.find('.carousel-item.active').next('.carousel-item');
					if (!nextItem.length) nextItem = this.$this.find('.carousel-item:first-of-type');
					this.scrollToItem(nextItem);
				}

			};
		}

	});

});