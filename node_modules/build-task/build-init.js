var FS = require('fs');

// 配置量
var OUTPUTPATH = './CONFIG.json';
var TIPS = [
	{
		key: 'transportSrc',
		val: '1. Input your project path, which is the path of transport(like: /data/project/resource_dev): '
	},
	{
		key: 'transportDest',
		val: '2. Input your destination after transport(like: /data/project/resource_publish): '
	},
	{
		key: 'uglifySrc',
		val: '3. Input path list of directory required to uglify(like: /data/project/resource_publish/app, /data/project/resource_publish/widget): '
	},
	{
		key: 'uglifyBase',
		val: '4. Input the base path of uglify directory(like: /data/project/resource_publish): '
	},
	{
		key: 'alias',
		val: '5. Input the alias modules json file path(like: ./alias.json): ',
	},
	{
		key: 'ignore',
		val: '6. Input the ignore modules json file path(like: ./ignore.json): ',
	},
	{
		key: 'gruntjs',
		val: '7. Input the gruntjs\'s path(default: ../gruntjs): ',
	},
	{
		val: '8. Are you sure?(yes) '
	}
];
var idx = 0;
var packageJSON = {};


// dispose according to different args
var args = process.argv;
if(args.length > 2){
	if(args[2] === '-h' || args[2] === '-help'){
		console.log('NO HELP!');
		return;
	}else if(args[2] === '-a'){
		TIPS = [
			{
				key: 'transportSrc',
				val: '1. Transport Source Path: ',
				def: './'
			},
			{
				key: 'transportDest',
				val: '2. Transport Destination Path: ',
				def: './'
			},
			{
				key: 'uglifySrc',
				val: '3. Ugilify Source Path: ',
				def: './'
			},
			{
				key: 'uglifyBase',
				val: '4. Ugilify Source Base Path: ',
				def: './'
			},
			{
				key: 'alias',
				val: '5. Alias File Path: ',
				def: './alias.json'
			},
			{
				key: 'ignore',
				val: '6. Ignore File Path: ',
				def: './ignore.json'
			},
			{
				key: 'gruntjs',
				val: '7. Gruntjs Tools Path: ',
				def: '../gruntjs'
			},
			{
				val: '8. Are you sure?(yes) '
			}
		];
	}
}


// 逐一保存
process.stdout.write(TIPS[idx].val);
process.stdin.setEncoding('utf8');
process.stdin.on('readable', function() {
	// 转化为string
	var chunk = process.stdin.read();
	var str = new String(chunk).toString().replace(/\r\n|\r|\n/g, '').toLowerCase();
	if(idx === 7){
		if(str == 'yes' || str == 'y'){
			FS.writeFileSync(OUTPUTPATH, JSON.stringify(packageJSON), 'utf-8');
			process.stdout.write('[SUCCESS]: File "' + OUTPUTPATH + '" has been created!');
		}else{
			process.stdout.write('[FAIL]: You have canceled the process!');
		}
		
		process.exit(1);
	}else if(chunk !== null) {
		str = str.split(',');
		packageJSON[TIPS[idx].key] = str.length === 1 ? str[0] : str;
	}else{
		packageJSON[TIPS[idx].key] = packageJSON[TIPS[idx].def];
	}
	
	idx++;
	process.stdout.write(TIPS[idx].val);
});

