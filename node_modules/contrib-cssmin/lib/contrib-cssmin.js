var FS = require('fs');
var PATH = require('path');
var mv = require('util-mv');

module.exports = cssmin;


var _FILETYPE 	= /\.(css|less|sass)/;
var _URLREG 	= /url(\s)*\(('|"){0,1}[^\t\r\n\)]+\.(png|jpg|jpge|gif|bmp)('|"){0,1}\)/g;
var _HTTPURL	= /url(\s)*\(('|"){0,1}http(s)?|url(\s)*\(('|"){0,1}\//;


function cssmin(src, dest, base, gruntPath, callback, ignore){
	if(!base){
		throw('Base path of relative img url is required, please check your input paramters!');
		return;
	}
	cp(src, dest);
	
	ignore ? null: ignore = PATH.join(src, 'lib');
	
	cssminTask(dest, base, gruntPath, callback, ignore);
}



function cp(src, dest){
	if(!FS.existsSync(src)){
		return;
	}
	var ll = FS.readdirSync(src);
	ll.forEach(function(file){
		var filename = PATH.join(src, file);
		var destFilename = PATH.join(dest, file);
		if(FS.statSync(filename).isDirectory()){
			cp(filename, destFilename)
		}else{
			mv(filename, destFilename);
		}
	});
}



function getCssList(src, base, ignore){
	var list = {};
	
	traverse(src);
	
	function traverse(path){
		var ll = FS.readdirSync(path);
		ll.forEach(function(name){
			var filepath = PATH.join(path, name);
			var tmp;
			if(FS.statSync(filepath).isDirectory() && ignore !== filepath){
				traverse(filepath);
			}else if(_FILETYPE.test(name)){
				// 先重写css中有相对路径的图片路径
				disposeRelUrl(filepath);
				// 再添加到构建列表中
				tmp = filepath.replace(/\\\\/g, '/');
				list[tmp] = [tmp];
			}
		});
	}
	
	function disposeRelUrl(path){
		if(_HTTPURL.test(path)){
			return;
		}
		var content = FS.readFileSync(path, 'utf-8');
		var matches = content.match(_URLREG);
		if(matches){
			matches.forEach(function(itm){
				var tmp = itm.replace(/url\(('|"){0,1}/, '').replace(/('|"){0,1}\)/, '');
				// 合并完整路径
				tmp = PATH.join(PATH.dirname(path), tmp).replace(/\\|\\\\/g, '/');
				// 除去根目录,再根据base合成请求的绝对或相对路径
				tmp = PATH.join(base, tmp.replace(src, '')).replace(/\\|\\\\/g, '/');
				// 回写
				content = content.replace(itm, 'url(' + tmp + ')');
			});
		}
		// 重写文件
		FS.writeFileSync(path, content, 'utf-8');
	}
	
	return list;
}



function cssminTask(src, base, gruntPath, callback, ignore){
	var task = {
		task: {
			files: getCssList(src, base, ignore)
		}
	};
	
	var output = '\
        module.exports = function(grunt){\
            grunt.initConfig({\
                pkg: grunt.file.readJSON("package.json"),\
                cssmin:' + JSON.stringify(task) + 
            '});\
            grunt.loadNpmTasks("grunt-contrib-cssmin");\
            grunt.registerTask("default", ["cssmin"]);\
        };';
		
	FS.writeFileSync(PATH.join(gruntPath,'Gruntfile.js'), output);
    execGrunt(gruntPath, callback);
}


/**
 * @param {string} path gruntjs所在的路径
 * @param {function} callback
 * @returns {}
 */
function execGrunt(path, callback) {
    var exec = require('child_process').exec;
    exec('cd ' + path + ' && grunt --force', function(error, stdout, stderr) {
        if (error !== null) {
            console.log('Cssmin exec error: ' + error);
            return;
        }
		console.log(stdout);
		
        typeof callback === 'function' ? callback() : null;
    });
}