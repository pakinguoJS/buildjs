var FS = require('fs');

// 配置量
var OUTPUTPATH = './CONFIG.json';
var TIPS = [
	{
		key: 'CONFSRC',
		val: '1. Seajs config tpl: \n',
		def: './'
	},
	{
		key: 'CONFDEST',
		val: '2. Seajs config dest: \n',
		def: './'
	},
	{
		key: 'JSALIAS',
		val: '3. JS alias path: \n',
		def: './'
	},
	{
		key: 'CSSALIAS',
		val: '4. CSS alias path: \n',
		def: './'
	},
	{
		key: 'SYNCHROEXCLUDESRC',
		val: '5. Synchronize-exclude src: \n',
		def: './'
	},
	{
		key: 'SYNCHROEXCLUDEDEST',
		val: '6. Synchronize-exclude dest: \n',
		def: './'
	},
	{
		key: 'SYNCHROONLYSRC',
		val: '7. Synchronize-only src: \n',
		def: './'
	},
	{
		key: 'SYNCHROONLYDEST',
		val: '8. Synchronize-only dest: \n',
		def: './'
	},
	{
		key: 'VERSION',
		val: '9. Version: \n',
		def: ''
	},
	{
		val: 'Are you sure?(yes) '
	}
];
var idx = 0;
var l = TIPS.length - 1;
var packageJSON = {};


// dispose according to different args
var args = process.argv;
if(args.length > 2){
	if(args[2] === '-h' || args[2] === '-help'){
		console.log('NO HELP!');
		return;
	}else{
		OUTPUTPATH = args[2];
	}
}


// 逐一保存
process.stdin.setEncoding('utf8');
process.stdout.write(TIPS[idx].val);
process.stdin.on('readable', function() {
	// 转化为string
	var chunk = process.stdin.read();
	var str = new String(chunk).toString().replace(/\r\n|\r|\n/g, '');
	if(idx === l){
		if(str == 'yes' || str == 'y'){
			FS.writeFileSync(OUTPUTPATH, JSON.stringify(packageJSON), 'utf-8');
			process.stdout.write('[SUCCESS]: File "' + OUTPUTPATH + '" has been created!\n');
		}else{
			process.stdout.write('[FAIL]: You have canceled the process!\n');
		}
		
		process.exit(1);
	}else if(chunk !== null) {
		str = str.split(',');
		packageJSON[TIPS[idx].key] = str.length === 1 ? str[0] : str;
	}else if(chunk === null){
		return;
	}else{
		packageJSON[TIPS[idx].key] = packageJSON[TIPS[idx].def];
	}
	
	idx++;
	process.stdout.write(TIPS[idx].val);
});

process.stdin.on('end', function() {
	process.stdout.write('end');
});
