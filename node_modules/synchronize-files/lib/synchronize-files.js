var FS 		= require('fs');
var PATH 	= require('path');

var mkdir 	= require('util-mkdir');
var mv		= require('util-mv');
var rm 		= require('util-rm');

module.exports = {
	compareExclude:	compareExclude,
	compareOnly	 :	compareOnly,
};


/**
* @param	{string}	src		source path of compare proj
* @param	{string}	dist	destination path of compare proj
* @param	{object}	setting	settings of except file & directory
*/
function compareExclude(src, dist, setting){
	if(arguments.length < 2){
		throw('Parameters Error!');
		return;
	}
	
	// make sure dist is existed
	mkdir(dist);

	// config
	var _setting = setting || {
		file: /\.tpl$|\.htpl$/,
		dir : 'view'
	};
	
	
	//===========
	// log time
	//===========
	var start = new Date();
	
	
	compareSrc2Dist(src, dist);
	compareDist2Src(dist, src);
	
	
	//===========
	// log time
	//===========
	var end = new Date();
	console.log("== COMPAREEXCLUDE TASK Total time: " + (end.getTime() - start.getTime()) + " ms");
	console.log("----------------------------------------");
	
	
	function compareSrc2Dist(from, to){
		var ll = FS.readdirSync(from);
		ll.forEach(function(name){
			var fpath = PATH.join(from, name);
			var tpath = PATH.join(to, name);
			if(FS.statSync(fpath).isDirectory()){
				// pass if path match the regexp
				if(_setting.dir !== name){
					compareSrc2Dist(fpath, tpath);
					mkdir(tpath);
				}
			}else{
				if(!_setting.file.test(name)){
					mv(fpath, tpath);
				}
			}
		})
	}
	
	function compareDist2Src(from, to){
		var ll = FS.readdirSync(from);
		ll.forEach(function(name){
			var fpath = PATH.join(from, name);
			var tpath = PATH.join(to, name);
			if(FS.statSync(fpath).isDirectory()){
				compareDist2Src(fpath, tpath);
			}
			// tpath is src path, fpath is compare copy path
			mv(tpath, fpath);
		})
	}
}



function compareOnly(src, dist, setting){
	if(arguments.length < 2){
		throw('Parameters Error!');
		return;
	}
	
	// make sure dist is existed
	mkdir(dist);
	
	// config
	var _setting = setting || {
		file: /\.tpl$|\.html$/,
		dir : 'view',
		unfold: true
	};
	
	
	//===========
	// log time: start
	//===========
	var start = new Date();
	
	// 记录存在的指定file类型的文件
	var __existList = {};
	compareSrc2Dist(src, dist);
	compareDist2Src(dist);
	
	//===========
	// log time: end
	//===========
	var end = new Date();
	console.log("== COMPAREONLY TASK Total time: " + (end.getTime() - start.getTime()) + " ms");
	console.log("----------------------------------------");
	
	function compareSrc2Dist(from, to){
		var ll = FS.readdirSync(from);
		ll.forEach(function(name){
			var fpath = PATH.join(from, name);
			var tpath = PATH.join(to, name);
			if(FS.statSync(fpath).isDirectory()){
				compareSrc2Dist(fpath, tpath);
			}else{
				if(_setting.file.test(name)){
					if(_setting.unfold){
						// only get file path with "dist/xxx/xxx.tpl" short for "src/.../xxx/{_setting.dir}/xxx.tpl"
						tpath = tpath.replace(new RegExp('(\\\\|\\/)' + _setting.dir + '(\\\\|\\/)'), "____");
						// need to fix in windows
						var idx = tpath.lastIndexOf('/') + 1 || tpath.lastIndexOf('\\') + 1;
						tpath = PATH.join(dist, tpath.substr(idx, tpath.length).replace("____", '/'));
						
						mv(fpath, tpath);
						__existList[tpath] = 1;	// cache, mark unfolded path to src
					}else{
						mv(fpath, tpath);
						__existList[tpath] = 1;
					}
				}
			}
		})
	}
	
	function compareDist2Src(from){
		var ll = FS.readdirSync(from);
		ll.forEach(function(name){
			var fpath = PATH.join(from, name);
			if(FS.statSync(fpath).isDirectory()){
				compareDist2Src(fpath);
			}else{
				// get from cache
				if(!(fpath in __existList)){
					rm(fpath);
				}
			}
		})
	}
}
