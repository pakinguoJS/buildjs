var FS = require('fs');
var PATH = require('path');

module.exports = {
	compareExcept:	compareExcept,
	compareOnly	 :	compareOnly,
};


/**
* @param	{string}	src		source path of compare proj
* @param	{string}	dist	destination path of compare proj
* @param	{object}	setting	settings of except file & directory
*/
function compareExcept(src, dist, setting){
	if(arguments.length < 2){
		throw('Parameters Error!');
		return;
	}
	
	// make sure dist is existed
	mkdir(dist);

	// config
	var _setting = setting || {
		file: /\.tpl$|\.htpl$/,
		dir : /view[s]*/
	};
	
	
	//===========
	// log time
	//===========
	var start = new Date();
	
	
	compareSrc2Dist(src, dist);
	compareDist2Src(dist, src);
	
	
	//===========
	// log time
	//===========
	var end = new Date();
	console.log("============== COMPAREEXCEPT TASK ================");
	console.log("============== Total time: " + (end.getTime() - start.getTime()) + " ms ===============");
	console.log("=====================END==========================");
	
	
	function compareSrc2Dist(from, to){
		var ll = FS.readdirSync(from);
		ll.forEach(function(name){
			var fpath = PATH.join(from, name);
			var tpath = PATH.join(to, name);
			if(FS.statSync(fpath).isDirectory()){
				// pass if path match the regexp
				if(!_setting.dir.test(name)){
					compareSrc2Dist(fpath, tpath);
					mkdir(tpath);
				}
			}else{
				if(!_setting.file.test(name)){
					mv(fpath, tpath);
				}
			}
		})
	}
	
	function compareDist2Src(from, to){
		var ll = FS.readdirSync(from);
		ll.forEach(function(name){
			var fpath = PATH.join(from, name);
			var tpath = PATH.join(to, name);
			if(FS.statSync(fpath).isDirectory()){
				compareDist2Src(fpath, tpath);
			}
			// tpath is src path, fpath is compare copy path
			mv(tpath, fpath);
		})
	}
}



function compareOnly(src, dist, setting){
	if(arguments.length < 2){
		throw('Parameters Error!');
		return;
	}
	
	// make sure dist is existed
	mkdir(dist);
	
	// config
	var _setting = setting || {
		file: /\.tpl$/,
		dir : 'view',
		unfold: true
	};
	
	
	//===========
	// log time: start
	//===========
	var start = new Date();
	
	// 记录存在的指定file类型的文件
	var __existList = {};
	compareSrc2Dist(src, dist);
	compareDist2Src(dist);
	
	//===========
	// log time: end
	//===========
	var end = new Date();
	console.log("============== COMPAREONLY TASK ==================");
	console.log("============== Total time: " + (end.getTime() - start.getTime()) + " ms ===============");
	console.log("=====================END==========================");
	
	function compareSrc2Dist(from, to){
		var ll = FS.readdirSync(from);
		ll.forEach(function(name){
			var fpath = PATH.join(from, name);
			var tpath = PATH.join(to, name);
			if(FS.statSync(fpath).isDirectory()){
				compareSrc2Dist(fpath, tpath);
			}else{
				if(_setting.file.test(name)){
					if(_setting.unfold){
						// only get file path with "dist/xxx/xxx.tpl" short for "src/.../xxx/{_setting.dir}/xxx.tpl"
						tpath = tpath.replace(new RegExp('(\\\\|\\/)' + _setting.dir + '(\\\\|\\/)'), "____");
						// need to fix in windows
						var idx = tpath.lastIndexOf('/') + 1 || tpath.lastIndexOf('\\') + 1;
						tpath = PATH.join(dist, tpath.substr(idx, tpath.length).replace("____", '/'));
						
						mv(fpath, tpath);
						__existList[tpath] = 1;	// cache, mark unfolded path to src
					}else{
						mv(fpath, tpath);
						__existList[tpath] = 1;
					}
				}
			}
		})
	}
	
	function compareDist2Src(from){
		var ll = FS.readdirSync(from);
		ll.forEach(function(name){
			var fpath = PATH.join(from, name);
			if(FS.statSync(fpath).isDirectory()){
				compareDist2Src(fpath);
			}else{
				// get from cache
				if(!(fpath in __existList)){
					rm(fpath);
				}
			}
		})
	}
}



/**
* @param	{string}	dir		path
* @desc		like shell command mkdir
*/
function mkdir(dir){
	if(!FS.existsSync(dir)){
		var _path = dir.split(/\/|\\/);
		if(_path.length === 1){
			return;
		}
		_path.pop();
		mkdir(_path.join('/'));
		FS.mkdirSync(dir);
	}
}

/**
* @param	{string}	from		copy src
* @param	{string}	to			copy target
* @desc		like shell command mv
*/
function mv(from, to){
	if(!FS.existsSync(from)){
		if(FS.existsSync(to)){
			rm(to);
		}
		return;
	}
	if(FS.statSync(from).isDirectory()){
		// if is a directory, mkdir
		mkdir(to);
	}else{
		// if is a file, compare first
		if(FS.existsSync(to)){
			if(FS.readFileSync(from, 'utf-8') !== FS.readFileSync(to, 'utf-8')){ // if there were any other way to compare two files
				mvinner(from, to);
			}
		}else{
			mvinner(from, to);
		}
		
	}
	
	function mvinner(f, t){
		var dir = PATH.dirname(t);
		mkdir(dir);
		FS.writeFileSync(t, FS.readFileSync(f));
	}
}

/**
* @param	{string}	path		remove src
* @desc		like shell command rm
*/
function rm(path){
	if(FS.statSync(path).isDirectory()){
		var ll = FS.readdirSync(path);
		ll.forEach(function(name){
			rm(PATH.join(path, name));
		})
		FS.rmdirSync(path);
	}else{
		FS.unlinkSync(path);
	}
}