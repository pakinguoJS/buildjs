var FS = require('fs');
var PATH = require('path');
var mv = require('util-mv');

module.exports = relese;


function relese(lang, src, exclude, gruntPath, alias, callback) {
	src = src.replace(/\\\\|\\/g, '/');
	cssminTask(lang, src, exclude, gruntPath, function() {
		transportTask(lang, src, src, exclude, alias, gruntPath, function() {
			uglifyTask(lang, src, exclude, gruntPath, function(){
				typeof callback === 'function' ? callback() : null;
			});
		});
	});
}



function update(src, exclude, type, name) {
	var recode = PATH.join(process.cwd(), '__buildjs', (name ? name : type.toUpperCase()) + '_RECODE.json');
	if (!FS.existsSync(recode)) {
		FS.writeFileSync(recode, '{}', 'utf-8');
	}
	var cache = require(recode);
	var reg = new RegExp('\.' + type + '$');
	traverse(src);

	function traverse(path) {
		if (path === exclude) {
			return;
		}
		var ll = FS.readdirSync(path);
		ll.forEach(function(name) {
			var filepath = PATH.join(path, name);
			var tmp, time;
			if (FS.statSync(filepath).isDirectory()) {
				traverse(filepath);
			} else if (reg.test(name)) {
				tmp = filepath.replace(/\\\\|\\/g, '/');
				time = FS.statSync(tmp).mtime.getTime();
				if (tmp in cache && cache[tmp] !== time) {
					cache[tmp] = time;
				}
			}
		});
	}

	FS.writeFileSync(recode, JSON.stringify(cache), 'utf-8');
}


function getList(src, exclude, type, name) {
	var recode = PATH.join(process.cwd(), '__buildjs', (name ? name : type.toUpperCase()) + '_RECODE.json');
	if (!FS.existsSync(recode)) {
		FS.writeFileSync(recode, '{}', 'utf-8');
	}
	var cache = require(recode);
	var list = {};
	var reg = new RegExp('\.' + type + '$');
	traverse(src);

	function traverse(path) {
		if (path === exclude) {
			return;
		}
		var ll = FS.readdirSync(path);
		ll.forEach(function(name) {
			var filepath = PATH.join(path, name);
			var tmp, time;
			if (FS.statSync(filepath).isDirectory()) {
				traverse(filepath);
			} else if (reg.test(name)) {
				tmp = filepath.replace(/\\\\|\\/g, '/');
				time = FS.statSync(tmp).mtime.getTime();
				// 判断是否在缓存列表中，如果在，对比时间
				if (!(tmp in cache) || tmp in cache && cache[tmp] !== time) {
					list[tmp] = [tmp];
					cache[tmp] = time;
				}
			}
		});
	}

	FS.writeFileSync(recode, JSON.stringify(cache), 'utf-8');
	return list;
}


function cssminTask(lang, src, exclude, gruntPath, callback) {
	var task = {
		task: {
			files: getList(src, exclude, 'css', ('css_' + lang).toUpperCase())
		}
	};

	var output = '\
        module.exports = function(grunt){\
            grunt.initConfig({\
                pkg: grunt.file.readJSON("package.json"),\
                cssmin:' + JSON.stringify(task) +
		'});\
            grunt.loadNpmTasks("grunt-contrib-cssmin");\
            grunt.registerTask("default", ["cssmin"]);\
        };';

	FS.writeFileSync(PATH.join(gruntPath, 'Gruntfile.js'), output);
	execGrunt(gruntPath, function() {
		update(src, exclude, 'css', ('css_' + lang).toUpperCase());
		typeof callback === 'function' ? callback() : null;
	});
}


/**
 * @param {string} src
 * @param {string} dest
 * @param {object} alias
 * @param {function} callback
 * @returns {undefined}
 */
function transportTask(lang, src, dest, exclude, alias, gruntPath, callback) {
	var files = [];
	var list = getList(src, exclude, 'js', ('js_' + lang).toUpperCase());
	for(var itm in list){
		files.push({
			expand: true,
			cwd: dest,
			src: itm.replace(dest + '/', ''),
			dest: dest
		})
	}

	var transport = "{\
		transport4js: {\
            options: {\
                debug: false,\
                alias: " + JSON.stringify(alias) + "\
            },\
            files: " + JSON.stringify(files) + "\
        }\
	}";


	var output = '\
        module.exports = function(grunt){\
			var style = require("grunt-cmd-transport").style.init(grunt);\
			var css2jsParser = style.css2jsParser;\
			var jsParser = require("grunt-cmd-transport").script.init(grunt).jsParser;\
            grunt.initConfig({\
                pkg: grunt.file.readJSON("package.json"),\
                transport:' + transport +
		'});\
            grunt.loadNpmTasks("grunt-cmd-transport");\
            grunt.registerTask("default", ["transport"]);\
        };';

	FS.writeFileSync(PATH.join(gruntPath, 'Gruntfile.js'), output, 'utf-8');
	execGrunt(gruntPath, function() {
		typeof callback === 'function' ? callback() : null;
	});
}



/**
 * @param {type} src
 * @param {type} dist
 * @param {type} alias
 * @param {function} callback
 * @param {type} ignore
 * @returns {undefined}
 */
function uglifyTask(lang, src, exclude, gruntPath, callback) {
	var list = getList(src, exclude, 'js', ('UGLIFYJS_' + lang).toUpperCase());
	var uglify = {
		uglifyTask: {
			files: list
		}
	};

	var output = '\
        module.exports = function(grunt){\
            grunt.initConfig({\
                pkg: grunt.file.readJSON("package.json"),\
                uglify:' + JSON.stringify(uglify) +
		'});\
            grunt.loadNpmTasks("grunt-contrib-uglify");\
            grunt.registerTask("default", ["uglify"]);\
        };';

	FS.writeFileSync(PATH.join(gruntPath, 'Gruntfile.js'), output);
	execGrunt(gruntPath, function() {
		update(src, exclude, 'js', ('js_' + lang).toUpperCase());
		update(src, exclude, 'js', ('UGLIFYJS_' + lang).toUpperCase());
		typeof callback === 'function' ? callback() : null;
	});
}



/**
 * @param {string} path gruntjs所在的路径
 * @param {function} callback
 * @returns {}
 */
function execGrunt(path, callback) {
	var exec = require('child_process').exec;
	exec('cd ' + path + ' && grunt --force', function(error, stdout, stderr) {
		if (error !== null) {
			console.log('Cssmin exec error: ' + error);
			return;
		}
		console.log(stdout);

		typeof callback === 'function' ? callback() : null;
	});
}