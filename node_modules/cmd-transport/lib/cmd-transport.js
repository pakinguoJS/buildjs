/**
 * @description
 * 由于是依赖gruntjs构建工具，在做transport前，需要创建Gruntfile.js
 */

var FS = require('fs');
var PATH = require('path');
var mv = require('util-mv');
var rm = require('util-rm');

module.exports = transportTask;


/**
 * @param {string} src
 * @param {string} dest
 * @param {string} exclude
 * @returns {undefined}
 */
function transportCopy(src, dest){
	if(!FS.existsSync(src)){
		return;
	}
	var ll = FS.readdirSync(src);
	ll.forEach(function(file){
		var filename = PATH.join(src, file);
		var destFilename = PATH.join(dest, file);
		if(FS.statSync(filename).isDirectory()){
			transportCopy(filename, destFilename)
		}else{
			mv(filename, destFilename);
		}
	});
}


/**
 * @param {string} src
 * @param {string} dest
 * @param {object} alias
 * @param {function} callback
 * @returns {undefined}
 */
function transportTask(src, dest, alias, gruntPath, callback, exclude) {

	// 先复制源文件，默认不复制src下的lib文件夹（需要先删除dest下面的lib）
	exclude ? null : exclude = 'lib';
	var excludeSrc = PATH.join(src, exclude).replace(/(\\|\/)$/, '');
	var excludeDst = PATH.join(dest, exclude).replace(/(\\|\/)$/, '');
	transportCopy(src, dest, excludeSrc);
	rm(excludeDst);
	
	var transport = "{\
		transport4css: {\
			options: {\
				debug: false,\
				uglify: true,\
				parsers: {\
					'.css': [css2jsParser]\
				}\
			},\
			files: [{\
				expand: true,\
				cwd: '" + dest + "',\
				src: '**/*.css',\
				dest: '" + dest + "'\
			}]\
		},\
		transport4js: {\
            options: {\
                debug: false,\
                alias: " + JSON.stringify(alias) + "\
            },\
            files: [\
                {\
                    expand: true,\
                    cwd: '" + dest + "',\
                    src: '**/*.js',\
                    dest: '" + dest + "'\
                }\
            ]\
        }\
	}";
	
	
    var output = '\
        module.exports = function(grunt){\
			var style = require("grunt-cmd-transport").style.init(grunt);\
			var css2jsParser = style.css2jsParser;\
			var jsParser = require("grunt-cmd-transport").script.init(grunt).jsParser;\
            grunt.initConfig({\
                pkg: grunt.file.readJSON("package.json"),\
                transport:' + transport + 
            '});\
            grunt.loadNpmTasks("grunt-cmd-transport");\
            grunt.registerTask("default", ["transport"]);\
        };';

    FS.writeFileSync(PATH.join(gruntPath,'Gruntfile.js'), output, 'utf-8');
    execGrunt(gruntPath, function(){
		// 将lib复制回去
		transportCopy(excludeSrc, excludeDst);
		// 删除transport的src
		rm(src);
	}, callback);
}



/**
 * @param {string} path gruntjs所在的路径
 * @param {function} callback
 * @returns {}
 */
function execGrunt(path, innerCallback, callback) {
    var exec = require('child_process').exec;
    exec('cd ' + path + ' && grunt --force', function(error, stdout, stderr) {
        if (error !== null) {
            console.log('Transport exec error: ' + error);
            return;
        }
		console.log(stdout);
		
		typeof innerCallback === 'function' ? innerCallback() : null;
		
        typeof callback === 'function' ? callback() : null;
    });
}


